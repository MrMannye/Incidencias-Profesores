import Head from 'next/head'
import NavBar from '@/components/NavBar'
import { useEffect, useState } from 'react'
import axios from 'axios';
import { Skeleton } from '@mui/material';
import Fab from '@mui/material/Fab';
import AddIcon from '@mui/icons-material/Add';
import Link from 'next/link';
import { useSelector } from 'react-redux'
import { RootState } from '@/store/store';
import InterestBar from '@/components/InterestBar';
import Header from '@/components/Header';


interface Event {
  Id: number,
  name_evento?: string,
  organizador?: string,
  descripcion_evento?: string,
  fecha_evento: Date,
}

export default function MisEventos() {

  const [eventos, setEventos] = useState<Event[]>([]);
  const [prueba, setPrueba] = useState(false);
  const user = useSelector((state: RootState) => state.user)
  const colorsBackground = ["from-cyan-300 to-blue-300", "from-indigo-300 to-pink-300", "from-indigo-300 from-cyan-300", "from-blue-400 to-orange-200", "from-purple-400 to-yellow-200", "from-cyan-400 to-blue-400", "from-indigo-400 to-pink-300", "from-indigo-400 from-cyan-400", "from-blue-400 to-orange-200", "from-rose-300 to-yellow-200"]

  useEffect(() => {
    axios.post("https://proactiveweek-superbrandon2018.b4a.run/events/miseventos",{
        id: user?.Id
    }).then(response => {
      console.log(response.data);
      setEventos(response.data.body);
      setPrueba(true);
      console.log(user)
    }).catch(error => {
      console.log(error);
    })
  }, [])

  const selectColor = (): string => {
    let random: number = parseInt((Math.random() * 10).toFixed(0));
    let color: string = colorsBackground[random];
    return color === undefined ? "from-rose-300 to-lime-300" : color
  }

  return (
    <div className=''>
      <Head>
        <title>Incidencias Profesores</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <Header/>
      <main className='p-4 from-l flex flex-col items-start mb-24 mt-12 space-y-2'>
        {prueba ? (
          eventos?.map((evento: Event) => {
            return (
              <Link key={evento.Id} className="w-full" href={`/miseventos/${evento.Id}`}>
                <div className={`p-4 bg-gradient-to-r ${selectColor()} bg-o shadow-xl w-full border rounded-xl text-black`}>
                  <h2 className='font-bold text-xl'> {evento.name_evento}</h2>
                  <div className=''>
                    <h4 className='text-lg'>{evento.organizador}</h4>
                    <h5>{new Date(evento.fecha_evento).toLocaleDateString('es-us', { weekday: "long", year: "numeric", month: "short", day: "numeric" })}</h5>
                    <InterestBar id={evento.Id} />
                  </div>
                </div>
              </Link>

            )
          })
        ) : (
          [1, 2, 3, 4, 5, 6, 7].map(task => {
            return (
              <Skeleton key={task} variant="rectangular" className='w-full my-3' height={80} />
            )
          })
        )
        }
        <div className='fixed bottom-28 right-5'>
          <Link href={"/addTask"}>
            <Fab size="large" className='bg-orange-400' aria-label="add">
              <AddIcon className='text-white' />
            </Fab>
          </Link>
        </div>
      </main>
      <NavBar />
    </div>
  )
}